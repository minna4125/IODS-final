gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# tea_time is available
# multiple correspondence analysis
mca <- FactoMineR::MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, habillage = "quali", invisible=c("ind"))
### The tea dataset and Multiple Correspondence Analysis
#libraries and data
library(FactoMineR)
library(ggplot2)
library(dplyr)
library(tidyr)
library(leaps)
library(scatterplot3d)
data(tea)
#Structure and dimensions
str(tea)
dim(tea)
summary(tea)
### 6 variables to look closer at
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "breakfast", "evening", "SPC", "age")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
str(tea_time)
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# tea_time is available
# multiple correspondence analysis
mca <- FactoMineR::MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, habillage = "quali", invisible=c("ind"))
install.packages("scatterplot3d")
### The tea dataset and Multiple Correspondence Analysis
#libraries and data
library(FactoMineR)
library(ggplot2)
library(dplyr)
library(tidyr)
library(leaps)
library(scatterplot3d)
data(tea)
#Structure and dimensions
str(tea)
dim(tea)
summary(tea)
### 6 variables to look closer at
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "breakfast", "evening", "SPC", "age")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
str(tea_time)
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# tea_time is available
# multiple correspondence analysis
mca <- FactoMineR::MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, habillage = "quali", invisible=c("ind"))
install.packages("flashClust")
#libraries and data
library(FactoMineR)
library(ggplot2)
library(dplyr)
library(tidyr)
library(leaps)
library(scatterplot3d)
data(tea)
#Structure and dimensions
str(tea)
dim(tea)
summary(tea)
### 6 variables to look closer at
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "breakfast", "evening", "SPC", "age")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
str(tea_time)
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# tea_time is available
# multiple correspondence analysis
mca <- FactoMineR::MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, habillage = "quali", invisible=c("ind"))
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, habillage = "quali", invisible=c("ind"))
### The tea dataset and Multiple Correspondence Analysis
#libraries and data
library(FactoMineR)
library(ggplot2)
library(dplyr)
library(tidyr)
library(leaps)
library(scatterplot3d)
data(tea)
#Structure and dimensions
str(tea)
dim(tea)
summary(tea)
### 6 variables to look closer at
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "breakfast", "evening", "SPC", "friendliness")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
str(tea_time)
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# tea_time is available
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, habillage = "quali", invisible=c("ind"))
library(FactoMineR)
library(ggplot2)
library(dplyr)
library(tidyr)
library(leaps)
library(scatterplot3d)
data(tea)
#Structure and dimensions
str(tea)
dim(tea)
summary(tea)
### 6 variables to look closer at
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "breakfast", "evening", "SPC", "friendliness")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
str(tea_time)
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# tea_time is available
# multiple correspondence analysis
mca <- FactoMineR::MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, habillage = "quali", invisible=c("ind"))
dim(human)
s_human <- scale(human)
summary(s_human)
spca_human <- prcomp(s_human)
biplot(spca_human, choices = 1:2)
str(tea)
dim(tea)
summary(tea)
summary(mca)
#libraries and data
library(FactoMineR)
library(ggplot2)
library(dplyr)
library(tidyr)
library(leaps)
library(scatterplot3d)adolesent child.
data(tea)
#Structure and dimensions
str(tea)
dim(tea)
summary(tea)
###Structure of the data is a data frame with 300 observations and 36 factor variables.
####Six variables to look closer at
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "breakfast", "SPC")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
str(tea_time)
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# multiple correspondence analysis
mca <- FactoMineR::MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, habillage = "quali", invisible=c("ind"))
# summary of the model
summary(mca)
human <- read.csv("human2", header = T, sep = ",", row.names =1)
colnames(human)
4*650
=
#Minna Perälampi
#minna.peralampi@helsinki.fi
#2.3.2017
#Data wrangling for Introduction to Open Data science final assingment
setwd("C:/Users/Minna/Documents/GitHub/IODS-final/IODS-final")
#Libraries needed
library(tidyr)
library(dplyr)
#Reading the anime table
anime <- read.csv("anime.csv", stringsAsFactors = F )
#Exploring the data set
summary(anime)
dim(anime)
str(anime)
#Removing rows with NA values from the table
anime_ <- filter(anime, complete.cases(anime))
#Making a genre matrix that will replace genre variable
#Changing genres name to lower case
anime_$genre <- tolower(anime_$genre)
#Creating a new vector with all the genres
genreslist <- strsplit(anime_$genre, ", ", perl=TRUE)
genres <- unique(unlist(genreslist))
genres
#Making a genre matrix
genrematrix <- matrix(0, nrow(anime_), length(genres))
colnames(genrematrix) <- genres
for (i in 1:nrow(anime_)) {
genrematrix[i, ] <- genres %in% genreslist[[i]]
}
#Making genres groups by clustering
clusters <- kmeans(genrematrix, centers=7, nstart=30, iter.max=10000)
#Combinin genre matrix with anime_ table to anime_gen
anime_gen <- cbind(anime_, "genre_cluster" = clusters$cluster)
#Checking
glimpse(anime_gen)
#Removing the genre  variable from the anime_gen
anime_gen <- subset(anime_gen, select = -genre)
glimpse(anime_gen)
#Then we make ratings to a factor variable with categories of like, doesn't like and neutral
anime_gen$rating[anime_gen$rating < 7.5 ] <- "0"
anime_gen$rating[anime_gen$rating == 7.5 ] <- "0"
anime_gen$rating[anime_gen$rating > 7.5 ] <- "1"
anime_gen$rating <- as.numeric(anime_gen$rating)
#Changing the type form character to a factor
anime_gen$type <- as.factor(anime_gen$type)
#changing episodes from charactor to numeric
anime_gen$episodes <- as.numeric(anime_gen$episodes)
#Making the anime ids as row names
rownames(anime_gen) <- anime_gen[anime_gen$anime_id]
#Removing the anime id variable and the name variable
anime_gen <- select(anime_gen, -anime_id)
glimpse(anime_gen)
#Minna Perälampi
#minna.peralampi@helsinki.fi
#2.3.2017
#Data wrangling for Introduction to Open Data science final assingment
setwd("C:/Users/Minna/Documents/GitHub/IODS-final")
#Libraries needed
library(tidyr)
library(dplyr)
#Reading the anime table
anime <- read.csv("anime.csv", stringsAsFactors = F )
#Exploring the data set
summary(anime)
dim(anime)
str(anime)
#Removing rows with NA values from the table
anime_ <- filter(anime, complete.cases(anime))
#Making a genre matrix that will replace genre variable
#Changing genres name to lower case
anime_$genre <- tolower(anime_$genre)
#Creating a new vector with all the genres
genreslist <- strsplit(anime_$genre, ", ", perl=TRUE)
genres <- unique(unlist(genreslist))
genres
#Making a genre matrix
genrematrix <- matrix(0, nrow(anime_), length(genres))
colnames(genrematrix) <- genres
for (i in 1:nrow(anime_)) {
genrematrix[i, ] <- genres %in% genreslist[[i]]
}
#Making genres groups by clustering
clusters <- kmeans(genrematrix, centers=7, nstart=30, iter.max=10000)
#Combinin genre matrix with anime_ table to anime_gen
anime_gen <- cbind(anime_, "genre_cluster" = clusters$cluster)
#Checking
glimpse(anime_gen)
#Removing the genre  variable from the anime_gen
anime_gen <- subset(anime_gen, select = -genre)
glimpse(anime_gen)
#Then we make ratings to a factor variable with categories of like, doesn't like and neutral
anime_gen$rating[anime_gen$rating < 7.5 ] <- "0"
anime_gen$rating[anime_gen$rating == 7.5 ] <- "0"
anime_gen$rating[anime_gen$rating > 7.5 ] <- "1"
anime_gen$rating <- as.numeric(anime_gen$rating)
#Changing the type form character to a factor
anime_gen$type <- as.factor(anime_gen$type)
#changing episodes from charactor to numeric
anime_gen$episodes <- as.numeric(anime_gen$episodes)
#Making the anime ids as row names
rownames(anime_gen) <- anime_gen[anime_gen$anime_id]
#Removing the anime id variable and the name variable
anime_gen <- select(anime_gen, -anime_id)
glimpse(anime_gen)
write.csv(anime_gen, "anime_gen")
##################
m <- glm(rating ~ episodes+type+members+genre_cluster, data = anime_gen)
summary(m)
counts <- table(anime$rating, anime$type)
barplot(counts , main="Anime types", xlab = "Purple = liked", col=c( "pink", "purple"))
setwd("C:/Users/Minna/Documents/GitHub/IODS-final")
anime <- read.csv("anime_gen")
#Drawing the type variable
counts <- table(anime$rating, anime$type)
barplot(counts , main="Anime types", xlab = "Purple = liked", col=c( "pink", "purple"))
library(ggplot2)
g <- anime %>%
mutate(episodes = as.numeric(episodes)) %>%
ggplot(aes(episodes, rating) +
geom_point(aes(color = type))
library(ggplot2)
g <- anime %>%
ggplot(aes(episodes, rating) + geom_point(aes(color = type))
library(ggplot2)
g <- anime %>%
filter(!is.na(type)) %>%
mutate(episodes = as.numeric(episodes)) %>%
ggplot(aes(episodes, rating)) +
geom_point(aes(color = type)) +
facet_wrap(~ type, scales = "free_x")
library(ggplot2)
g <- anime %>%
filter(!is.na(type)) %>%
mutate(episodes = as.numeric(episodes)) %>%
ggplot(aes(episodes, rating)) +
geom_point(aes(color = type)) +
facet_wrap(~ type, scales = "free_x")
plot(g)
a <- anime %>%
filter(!is.na(type)) %>%
mutate(episodes = as.numeric(episodes)) %>%
ggplot(aes(episodes, rating)) +
coord_flip(ylim = c(0,2)) +
geom_point(aes(color = type)) +
facet_wrap(~ type, scales = "free_x")
plot(a)
library(ggplot2)
a <- anime %>%
filter(!is.na(type)) %>%
mutate(episodes = as.numeric(episodes)) %>%
ggplot(aes(episodes, rating, ylim = c(0,2))) +
geom_point(aes(color = type)) +
facet_wrap(~ type, scales = "free_x")
plot(a)
a <- anime %>%
filter(!is.na(type)) %>%
mutate(episodes = as.numeric(episodes)) %>%
ggplot(aes(episodes, rating)) +
coord_cartesian(ylim = c(0, 1)) +
geom_point(aes(color = type)) +
facet_wrap(~ type, scales = "free_x")
plot(a)
a <- anime %>%
filter(!is.na(type)) %>%
mutate(episodes = as.numeric(episodes)) %>%
ggplot(aes(episodes, rating)) +
coord_cartesian(ylim = c(0, 1)) +
geom_point(aes(color = type)) +
facet_wrap(~ type)
plot(a)
library(ggplot2)
a <- anime %>%
filter(!is.na(type)) %>%
mutate(episodes = as.numeric(episodes)) %>%
ggplot(aes(episodes, rating)) +
coord_cartesian(ylim = c(0, 1)) +
geom_point(aes(color = type)) +
facet_wrap(~ type, scales = "free_x")
plot(a)
a <- anime %>%
ggplot(aes(episodes, rating)) +
coord_cartesian(ylim = c(0, 1)) +
geom_point(aes(color = type)) +
facet_wrap(~ type, scales = "free_x")
plot(a)
a <- anime %>%
ggplot(aes(rating, episodes)) +
coord_cartesian(ylim = c(0, 1)) +
geom_point(aes(color = type)) +
facet_wrap(~ type, scales = "free_y")
plot(a)
library(ggplot2)
a <- anime %>%
ggplot(aes(rating, episodes)) +
geom_point(aes(color = type)) +
facet_wrap(~ type, scales = "free_y")
plot(a)
library(ggplot2)
a <- anime %>%
ggplot(aes(rating, episodes)) +
coord_cartesian(xlim = c(0, 1))+
geom_point(aes(color = type)) +
facet_wrap(~ type, scales = "free_y")
plot(a)
library(ggplot2)
a <- anime %>%
ggplot(aes(rating, episodes)) +
coord_cartesian(xlim = c(-1, 2))+
geom_point(aes(color = type)) +
facet_wrap(~ type, scales = "free_y")
plot(a)
library(ggplot2)
a <- anime %>%
ggplot(aes(rating, episodes)) +
coord_cartesian(xlim = c(-1, 2))+
boxplot(aes(color = type)) +
facet_wrap(~ type, scales = "free_y")
plot(a)
boxplot(type~rating, data=anime,
col=(c("gold","darkgreen")),
main="Tooth Growth", xlab="Suppliment and Dose")
boxplot(type~rating, data=anime,
col=(c("gold","darkgreen")),main="Tooth Growth", xlab="Suppliment and Dose")
a <- anime %>%
boxplot(aes(rating, episodes)) +
coord_cartesian(xlim = c(-1, 2))+
boxplot(aes(color = type)) +
facet_wrap(~ type, scales = "free_y")
library(ggplot2)
a <- anime %>%
ggplot(aes(rating, episodes)) +
coord_cartesian(xlim = c(-1, 2))+
boxplot(aes(color = type)) +
facet_wrap(~ type, scales = "free_y")
plot(a)
library(ggplot2)
a <- anime %>%
ggplot(aes(rating, episodes)) +
coord_cartesian(xlim = c(-1, 2))+
boxplot(aes(color = type)) +
facet_wrap(~ type, scales = "free_y")+
theme(axis.title.x=element_blank())
plot(a)
a <- anime %>%
ggplot(aes(rating, episodes)) +
coord_cartesian(xlim = c(-1, 2))+
boxplot(aes(color = type)) +
facet_wrap(~ type, scales = "free_y")+
theme(axis.ticks.x=element_blank())
plot(a)
library(ggplot2)
a <- anime %>%
ggplot(aes(rating, episodes)) +
coord_cartesian(xlim = c(-1, 2))+
boxplot(aes(color = type)) +
facet_wrap(~ type, scales = "free_y")+
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank())
plot(a)
library(ggplot2)
a <- anime %>%
ggplot(aes(rating, episodes)) +
coord_cartesian(xlim = c(-1, 2))+
boxplot(aes(color = type)) +  geom_bar(aes(fill = cut))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
facet_wrap(~ type, scales = "free_y")
plot(a)
library(ggplot2)
a <- anime %>%
ggplot(aes(rating, members)) +
coord_cartesian(xlim = c(-1, 2))+
boxplot(aes(color = type)) +  geom_bar(aes(fill = cut))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
facet_wrap(~ type, scales = "free_y")
plot(a)
a <- anime %>%
ggplot(aes(rating, members)) +
coord_cartesian(xlim = c(-1, 2))+
boxplot(aes(color = type)) +  geom_bar(aes(fill = cut))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
facet_wrap(~ type, scales = "free_y")
library(ggplot2)
a <- anime %>%
ggplot(aes(rating, episodes)) +
coord_cartesian(xlim = c(-1, 2))+
ggplot(aes(color = type)) +  geom_bar(aes(fill = cut))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
facet_wrap(~ type, scales = "free_y")
plot(a)
a <- anime %>%
ggplot(aes(rating, episodes)) +
coord_cartesian(xlim = c(-1, 2))+
ggplot(aes(color = type)) +  geom_bar(aes(fill = cut))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
facet_wrap(~ type, scales = "free_y")
plot(a)
